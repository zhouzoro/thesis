{"version":3,"sources":["core.babeled.min.js","core.babeled.js"],"names":["require","Map","MapView","MapImageLayer","FeatureLayer","PopupTemplate","Legend","Compass","CompassVM","Home","HomeVM","BasemapToggle","Popup","QueryTask","Query","SimpleFillSymbol","SimpleMarkerSymbol","GraphicsLayer","Graphic","Circle","Point","SimpleRenderer","ClassBreaksRenderer","map","basemap","view","container","zoom","center","then","searchForIt","addResult","title","desc","popid","$","attr","class","data-popid","append","text","click","featureId","this","data","console","log","authLyrCtrl","inviewIndex","flayr","authLyrs","query","where","returnGeometry","outFields","reorder","queryFeatures","results","popup","open","features","location","geometry","centroid","resultDiv","addClass","$input","show","hide","val","get","res","find","remove","projects","zones","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","rows","Symbol","iterator","next","done","rs","value","key","substring","err","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_rs","_key","id","links","csvNames","csvs","split","keyup","change","contentTable","compass","viewModel","startup","homeBtn","basemapToggle","nextBasemap","legend","ui","add","zoningLyr","url","zoningLyrCtrl","on","toggle","lyrIds","popupTemplate","content","i","tempLyr","switchTo","managePopupContent","status","el","childElementCount","unbind","fid","htmlStr","html","dropdown","field","qstr","createChart","bind"],"mappings":"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","file":"core.babeled.min.js","sourcesContent":["\"use strict\";\n\nrequire([\"esri/Map\", \"esri/views/MapView\", \"esri/layers/MapImageLayer\", \"esri/layers/FeatureLayer\", \"esri/PopupTemplate\", \"esri/widgets/Legend\", \"esri/widgets/Compass\", \"esri/widgets/Compass/CompassViewModel\", \"esri/widgets/Home\", \"esri/widgets/Home/HomeViewModel\", \"esri/widgets/BasemapToggle\", \"esri/widgets/Popup\", \"esri/tasks/QueryTask\", \"esri/tasks/support/Query\", \"esri/symbols/SimpleFillSymbol\", \"esri/symbols/SimpleMarkerSymbol\", \"esri/layers/GraphicsLayer\", \"esri/Graphic\", \"esri/geometry/Circle\", \"esri/geometry/Point\", \"esri/renderers/SimpleRenderer\", \"esri/renderers/ClassBreaksRenderer\", \"dojo/domReady!\"], function (Map, MapView, MapImageLayer, FeatureLayer, PopupTemplate, Legend, Compass, CompassVM, Home, HomeVM, BasemapToggle, Popup, QueryTask, Query, SimpleFillSymbol, SimpleMarkerSymbol, GraphicsLayer, Graphic, Circle, Point, SimpleRenderer, ClassBreaksRenderer) {\n\n    var map = new Map({\n        basemap: \"oceans\"\n    });\n    var view = new MapView({\n        container: \"map-container\",\n        map: map,\n        zoom: 9,\n        center: [121, 33]\n    });\n    var services = ['zoning', 'authorized', 'authorized_source', 'authorized_cata1', 'authorized_cata2', 'authorized_method'];\n    view.then(function () {\n\n        $('input[name=\"search\"').keyup(searchForIt).change(searchForIt);\n\n        $('i.icon.search').click(searchForIt);\n\n        var contentID = \"<label class='data-fid loader' data-fid='{FID}'>Loading...</label>\";\n        var contentTable = '<table class=\"ui celled table\"><tbody><tr><td>' + '区域ID' + '</td><td>' + '{FID}' + '</td></tr><tr><td>' + 'radius' + '</td><td>' + '{radius}' + '</td></tr><tr><td>' + '配号来源' + '</td><td>' + '{配号来源}' + '</td></tr><tr><td>' + '用海一级类' + '</td><td>' + '{用海一级类}' + '</td></tr><tr><td>' + '用海二级类' + '</td><td>' + '{用海二级类}' + '</td></tr><tr><td>' + '用海方式' + '</td><td>' + '{用海方式}' + '</td></tr><tr><td class=\"projects\">' + '项目数量' + '</td><td>*</td></tr></tbody></table>';\n\n        //==widgets======================//\n\n        var compass = new Compass({\n            viewModel: new CompassVM({\n                view: view\n            })\n        }, \"compass\");\n        compass.startup();\n\n        var homeBtn = new Home({\n            viewModel: new HomeVM({\n                view: view\n            })\n        }, \"home\");\n        homeBtn.startup();\n\n        var basemapToggle = new BasemapToggle({\n            view: view,\n            nextBasemap: \"hybrid\"\n        }, 'basemap');\n        basemapToggle.startup();\n\n        //var legend = new Legend({ view: view }, 'legend');\n\n        var legend = new Legend({\n            view: view\n        });\n        legend.startup();\n\n        view.ui.add(legend, \"bottom-right\");\n\n        //==widgets======================//\n\n        var zoningLyr = new FeatureLayer({\n            id: 'base',\n            url: \"http://localhost:6080/arcgis/rest/services/区域/MapServer/0\"\n        });\n\n        map.add(zoningLyr);\n        map.reorder(zoningLyr, 0);\n\n        var zoningLyrCtrl = {\n            on: true,\n            toggle: function toggle() {\n                if (this.on) {\n                    map.remove(zoningLyr);\n                } else {\n                    map.add(zoningLyr);\n                    map.reorder(zoningLyr, 0);\n                };\n                this.on = !this.on;\n            }\n        };\n\n        var lyrIds = ['功能区划', '确权数据', '确权数据--配号来源', '确权数据--用海一级类', '确权数据--用海二级类', '确权数据--用海方式'];\n\n        var authLyrs = [];\n        authLyrs[1] = new FeatureLayer({\n            id: lyrIds[1],\n            outFields: [\"*\"],\n            url: \"http://localhost:6080/arcgis/rest/services/用海信息/MapServer/1\",\n            popupTemplate: new PopupTemplate({\n                title: 'ID: {FID}',\n                content: contentTable\n            })\n        });\n        map.add(authLyrs[1]);\n\n        for (var i = 2; i < 6; i++) {\n            var tempLyr = new FeatureLayer({\n                id: lyrIds[i],\n                outFields: [\"*\"],\n                url: \"http://localhost:6080/arcgis/rest/services/用海信息/MapServer/\" + i,\n                popupTemplate: new PopupTemplate({\n                    title: 'ID: {FID}',\n                    content: contentTable\n                })\n            });\n\n            authLyrs[i] = tempLyr;\n        }\n\n        var authLyrCtrl = {\n            inviewIndex: 1,\n            on: true,\n            switchTo: function switchTo(val) {\n                if (val !== this.inviewIndex) {\n                    map.remove(authLyrs[this.inviewIndex]);\n                    map.add(authLyrs[val]);\n                    map.reorder(authLyrs[val], 1);\n                    this.inviewIndex = val;\n                }\n            },\n            show: function show() {\n                map.add(authLyrs[this.inviewIndex]);\n                map.reorder(authLyrs[this.inviewIndex], 1);\n                this.on = true;\n            },\n            hide: function hide() {\n                map.remove(authLyrs[this.inviewIndex]);\n                this.on = false;\n            },\n            toggle: function toggle() {\n                if (this.on) {\n                    map.remove(authLyrs[this.inviewIndex]);\n                    this.on = false;\n                } else {\n                    map.add(authLyrs[this.inviewIndex]);\n                    map.reorder(authLyrs[this.inviewIndex], 1);\n                    this.on = true;\n                }\n            }\n        };\n\n        function showVS(results) {\n            /*****\r\n                multipul layers for vs different outline size\r\n              ******/\n            var features = results.features;\n\n            var sym = new SimpleMarkerSymbol({\n                color: [26, 119, 80, 0.7],\n                outline: { // autocasts as new SimpleLineSymbol()\n                    color: [255, 255, 255],\n                    width: 1\n                }\n            });\n\n            var sym2 = new SimpleFillSymbol({\n                color: [26, 119, 80, 0.7],\n                outline: { // autocasts as new SimpleLineSymbol()\n                    color: [255, 255, 255],\n                    width: 2\n                }\n            });\n\n            var fields = [{\n                name: \"ObjectID\",\n                alias: \"ObjectID\",\n                type: \"oid\"\n            }, {\n                name: \"radius\",\n                alias: \"radius\",\n                type: \"double\"\n            }, {\n                name: \"radius2\",\n                alias: \"radius2\",\n                type: \"double\"\n            }];\n\n            fields = fields.concat(authLyrs[1].fields);\n\n            var colorVisVar = {\n                type: \"color\",\n                field: \"radius\",\n                stops: [{\n                    value: 4,\n                    color: [45, 195, 125, 0.9]\n                }, {\n                    value: 10,\n                    color: [45, 195, 125, 0.4]\n                }]\n            };\n\n            var colorVisVar2 = {\n                type: \"color\",\n                field: \"radius2\",\n                stops: [{\n                    value: 4,\n                    color: [155, 45, 95, 0.9]\n                }, {\n                    value: 10,\n                    color: [155, 45, 95, 0.4]\n                }]\n            };\n            var sizeVisVar = {\n                type: \"size\",\n                field: \"radius\",\n                valueUnit: \"unknown\",\n                stops: [{\n                    value: 4,\n                    size: 8\n                }, {\n                    value: 6,\n                    size: 24\n                }, {\n                    value: 8,\n                    size: 36\n                }, {\n                    value: 10,\n                    size: 42\n                }, {\n                    value: 12,\n                    size: 100\n                }]\n            };\n\n            var sizeVisVar2 = {\n                type: \"size\",\n                field: \"radius2\",\n                valueUnit: \"unknown\",\n                stops: [{\n                    value: 4,\n                    size: 42\n                }, {\n                    value: 6,\n                    size: 36\n                }, {\n                    value: 8,\n                    size: 24\n                }, {\n                    value: 10,\n                    size: 8\n                }]\n            };\n            var renderer = new SimpleRenderer({\n                // Define a default marker symbol with a small outline\n                symbol: new SimpleMarkerSymbol({\n                    color: [45, 195, 125, 0.7],\n                    outline: { // autocasts as new SimpleLineSymbol()\n                        color: [255, 255, 255, 0.6],\n                        width: 1\n                    }\n                }),\n                // Set the color and size visual variables on the renderer\n                visualVariables: [colorVisVar, sizeVisVar]\n            });\n\n            var renderer2 = new SimpleRenderer({\n                // Define a default marker symbol with a small outline\n                symbol: new SimpleMarkerSymbol({\n                    color: [45, 195, 125, 0.7],\n                    outline: { // autocasts as new SimpleLineSymbol()\n                        color: [255, 255, 255, 0.8],\n                        width: 1\n                    }\n                }),\n                // Set the color and size visual variables on the renderer\n                visualVariables: [colorVisVar2, sizeVisVar2]\n            });\n\n            function getSimpleR(outlineWidth) {\n                return new SimpleRenderer({\n                    // Define a default marker symbol with a small outline\n                    symbol: new SimpleMarkerSymbol({\n                        color: [45, 195, 125, 0.8],\n                        outline: { // autocasts as new SimpleLineSymbol()\n                            color: [85, 24 * outlineWidth, 185, 0.6],\n                            width: outlineWidth - 4\n                        }\n                    }),\n                    // Set the color and size visual variables on the renderer\n                    visualVariables: [sizeVisVar2]\n                });\n            }\n            var featureSets = [[], [], [], []];\n            features.forEach(function (feature, index) {\n                var attributes = feature.attributes;\n                var name = attributes.ZIP + \" (\" + attributes.PO_NAME + \")\";\n                var gm = feature.geometry;\n\n                var point = new Point({\n                    longitude: gm.longitude ? gm.longitude : gm.centroid.longitude,\n                    latitude: gm.latitude ? gm.latitude : gm.centroid.latitude\n                });\n\n                var radius = feature.attributes.FID > 1800 ? 10 : feature.attributes.FID > 1700 ? 8 : feature.attributes.FID > 1500 ? 6 : 4;\n\n                var circle = new Circle({\n                    radius: radius,\n                    radiusUnit: 'miles',\n                    center: feature.geometry.getPoint(0, 0)\n                });\n                feature.attributes.ObjectID = index;\n\n                feature.attributes.radius = radius;\n\n                feature.attributes.radius2 = 14 - radius;\n                switch (feature.attributes.radius2) {\n                    case 4:\n                        featureSets[0].push(feature);\n                    case 6:\n                        featureSets[1].push(feature);\n                    case 8:\n                        featureSets[2].push(feature);\n                    case 10:\n                        featureSets[3].push(feature);\n                }\n            });\n            for (var index in featureSets) {\n                var vslyr = new FeatureLayer({\n                    source: featureSets[index],\n                    fields: fields,\n                    objectIdField: \"ObjectID\",\n                    renderer: getSimpleR(index * 2 + 4),\n                    geometryType: \"polygon\",\n                    id: 'vs' + index\n\n                });\n\n                map.add(vslyr);\n\n                map.reorder(vslyr, 99);\n            }\n\n            var vslyr = new FeatureLayer({\n                source: features,\n                fields: fields,\n                objectIdField: \"ObjectID\",\n                renderer: renderer,\n                geometryType: \"polygon\",\n                id: 'vs'\n\n            });\n\n            //map.add(vslyr);\n\n            //map.reorder(vslyr, 99);\n            var vslyr2 = new FeatureLayer({\n                source: features,\n                fields: fields,\n                objectIdField: \"ObjectID\",\n                renderer: renderer2,\n                geometryType: \"polygon\",\n                id: 'vs2'\n\n            });\n\n            //map.add(vslyr2);\n\n            map.reorder(vslyr2, 99);\n            /*on(listNode, on.selector(\"li\", a11yclick), function(evt) {\r\n                var target = evt.target;\r\n                var resultId = domAttr.get(target, \"data-result-id\");\r\n                  // get the graphic corresponding to the clicked zip code\r\n                var result = resultId && graphics && graphics[parseInt(resultId,\r\n                    10)];\r\n                  if (result) {\r\n                    // open the popup at the centroid of zip code polygon\r\n                    // and set the popup's features which will populate popup content and title.\r\n                    view.popup.open({\r\n                        features: [result],\r\n                        location: result.geometry.centroid\r\n                    });\r\n                }\r\n            });*/\n        }\n\n        authLyrs[1].then(function () {\n            //authLyrs[1].queryFeatures().then(showVS);\n        });\n\n        $('input.toggle.toggle-zoning').change(function () {\n            zoningLyrCtrl.toggle();\n        });\n\n        $('input.toggle.toggle-auth').change(function () {\n            authLyrCtrl.toggle();\n        });\n\n        $('select[name=authLyr]').change(function () {\n            authLyrCtrl.switchTo($(this).val());\n        });\n\n        var managePopupContent = function () {\n            var status = 1;\n            return function () {\n                var el = $('.esri-popup-content')[0];\n                if (status === 1 && el.childElementCount > 0) {\n                    $('.esri-popup-content').unbind(\"DOMSubtreeModified\");\n                    var fid = $('.esri-popup-content').find('.data-fid.loader').data('fid');\n                    if (fid) {\n                        $.get('http://localhost:3000/popup_content?id=' + fid, function (htmlStr) {\n                            $('.esri-popup-content').html(htmlStr);\n\n                            $('.ui.dropdown').dropdown();\n                            $('.popup-content-custom table').find('a').click(function () {\n                                var field = $(this).data('type');\n                                var qstr = 'SELECT `' + field + '` as label, count(`' + field + '` = `' + field + '`) as value FROM gis1.authorizing group by `' + field + '`';\n                                createChart(qstr, field);\n                            });\n                            $('.esri-popup-content').bind(\"DOMSubtreeModified\", managePopupContent);\n                        });\n                    }\n\n                    status = 0;\n                };\n                if (el.childElementCount < 1) {\n                    status = 1;\n                };\n            };\n        }();\n\n        /*$('.esri-popup-content').bind(\"DOMSubtreeModified\", managePopupContent);\r\n        view.on('click', function(evt) {\r\n            showCoordinates(evt);\r\n        })\r\n          $.get('http://localhost:6080/arcgis/rest/services/用海信息/MapServer/legend?f=pjson', function(res) {\r\n            legendJson = JSON.parse(res);\r\n            for (var i = 1; i < 6; i++) {\r\n                var layerTemp = legendJson.layers[i];\r\n                var layerLegend = layerTemp.legend;\r\n                var tempSrc = new dataSrc();\r\n                tempSrc.chart.subCaption = layerTemp.layerName;\r\n                tempSrc.chart.xAxisName = layerTemp.layerName;\r\n                var queryStatesTask = new QueryTask({\r\n                    url: \"http://localhost:6080/arcgis/rest/services/用海信息/MapServer/\" + i\r\n                });\r\n                var promiseResults = [];\r\n                for (var j = layerLegend.length - 1; i >= 0; i--) {\r\n                    var legd = layerLegend[i];\r\n                    promiseResults.push(new Promise((resolve, reject) => {\r\n                        var query = new Query();\r\n                        query.where = layerTemp.layerName + \" = \" + \"'\" + legd.label + \"'\";\r\n                        queryStatesTask.execute(query).then(function(result) {\r\n                            console.log(result.features.length);\r\n                            var tempData = {\r\n                                \"label\": legd.label,\r\n                                \"value\": result.features.length\r\n                            };\r\n                            resolve(tempData);\r\n                        });\r\n                    }))\r\n                }\r\n                Promise.all(promiseResults).then(function(dataArr) {\r\n                    console.log(dataArr);\r\n                    tempSrc.data = dataArr;\r\n                    renderCol3d(tempSrc);\r\n                  })\r\n            }\r\n        })*/\n\n        function searchForIt() {\n            var resultDiv = $('#searchResult.results');\n            resultDiv.addClass('visible');\n            var $input = $('input[name=\"search\"');\n            $('i.icon.remove').show();\n            $('i.icon.search').hide();\n            console.log('http://localhost:3000/search?q=' + $input.val());\n            $.get('http://localhost:3000/search?q=' + $input.val(), function (res) {\n                console.log(res);\n                var resultDiv = $('#searchResult.results');\n                resultDiv.find('.result').remove();\n                var projects = resultDiv.find('.projects');\n                var zones = resultDiv.find('.zones');\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = res.rows[0][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var rs = _step.value;\n\n                        projects.show();\n                        $('a.csv1').show();\n                        var desc = '';\n                        for (var key in rs) {\n                            desc = desc + key + ': ' + rs[key];\n                        }\n                        desc = desc.substring(0, 64) + '...';\n                        projects.append(addResult(rs['项目名称'], desc, rs['确权区域ID']));\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n\n                var _iteratorNormalCompletion2 = true;\n                var _didIteratorError2 = false;\n                var _iteratorError2 = undefined;\n\n                try {\n                    for (var _iterator2 = res.rows[1][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                        var _rs = _step2.value;\n\n                        zones.show();\n                        $('a.csv2').show();\n                        var desc = '';\n                        for (var _key in _rs) {\n                            desc = desc + _key + ': ' + _rs[_key];\n                        }\n                        desc = desc.substring(0, 64) + '...';\n                        zones.append(addResult(_rs.id, desc, _rs.id));\n                    }\n                } catch (err) {\n                    _didIteratorError2 = true;\n                    _iteratorError2 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                            _iterator2.return();\n                        }\n                    } finally {\n                        if (_didIteratorError2) {\n                            throw _iteratorError2;\n                        }\n                    }\n                }\n\n                var links = resultDiv.find(\".download-results\");\n                var csvNames = res.csvs.split(',');\n\n                links.find('.csv1').attr('href', 'http://localhost:3000/csv/' + csvNames[0]);\n                links.find('.csv2').attr('href', 'http://localhost:3000/csv/' + csvNames[1]);\n                links.show();\n            });\n\n            function addResult(title, desc, popid) {\n                return $('<a>').attr({ 'class': 'result', 'data-popid': popid }).append($('<div>').attr('class', 'content').append($('<div>').attr('class', 'title').text(title)).append($('<div>').attr('class', 'description').text(desc))).click(function () {\n                    var featureId = $(this).data('popid');\n                    console.log(authLyrCtrl.inviewIndex);\n                    var flayr = authLyrs[authLyrCtrl.inviewIndex];\n                    var query = new Query();\n                    query.where = \"FID = \" + featureId;\n                    query.returnGeometry = true;\n                    query.outFields = ['*'];\n                    map.reorder(flayr, 100);\n                    flayr.queryFeatures(query).then(function (results) {\n                        console.log(results);\n                        view.popup.open({\n                            features: [results.features[0]],\n                            location: results.features[0].geometry.centroid\n                        });\n                    });\n                });\n            }\n        }\n    });\n\n    function showCoordinates(evt) {\n        $('#esri_widgets_Attribution_0 > div.esri-attribution__sources').html(evt.mapPoint.latitude + evt.mapPoint.longitude);\n    }\n});","require([\r\n    \"esri/Map\",\r\n    \"esri/views/MapView\",\r\n    \"esri/layers/MapImageLayer\",\r\n    \"esri/layers/FeatureLayer\",\r\n    \"esri/PopupTemplate\",\r\n    \"esri/widgets/Legend\",\r\n    \"esri/widgets/Compass\",\r\n    \"esri/widgets/Compass/CompassViewModel\",\r\n    \"esri/widgets/Home\",\r\n    \"esri/widgets/Home/HomeViewModel\",\r\n    \"esri/widgets/BasemapToggle\",\r\n    \"esri/widgets/Popup\",\r\n    \"esri/tasks/QueryTask\",\r\n    \"esri/tasks/support/Query\",\r\n    \"esri/symbols/SimpleFillSymbol\",\r\n    \"esri/symbols/SimpleMarkerSymbol\",\r\n    \"esri/layers/GraphicsLayer\",\r\n    \"esri/Graphic\",\r\n    \"esri/geometry/Circle\",\r\n    \"esri/geometry/Point\",\r\n    \"esri/renderers/SimpleRenderer\",\r\n    \"esri/renderers/ClassBreaksRenderer\",\r\n    \"dojo/domReady!\"\r\n], function(Map, MapView, MapImageLayer, FeatureLayer, PopupTemplate, Legend, Compass, CompassVM, Home, HomeVM, BasemapToggle, Popup, QueryTask, Query, SimpleFillSymbol, SimpleMarkerSymbol, GraphicsLayer, Graphic, Circle, Point, SimpleRenderer, ClassBreaksRenderer) {\r\n\r\n    var map = new Map({\r\n        basemap: \"oceans\"\r\n    });\r\n    var view = new MapView({\r\n        container: \"map-container\",\r\n        map: map,\r\n        zoom: 9,\r\n        center: [121, 33]\r\n    });\r\n    var services = ['zoning', 'authorized', 'authorized_source', 'authorized_cata1', 'authorized_cata2', 'authorized_method'];\r\n    view.then(function() {\r\n\r\n        $('input[name=\"search\"').keyup(searchForIt).change(searchForIt);\r\n\r\n\r\n        $('i.icon.search').click(searchForIt);\r\n\r\n        var contentID = \"<label class='data-fid loader' data-fid='{FID}'>Loading...</label>\";\r\n        var contentTable = '<table class=\"ui celled table\"><tbody><tr><td>' + '区域ID' + '</td><td>' + '{FID}' + '</td></tr><tr><td>' + 'radius' + '</td><td>' + '{radius}' + '</td></tr><tr><td>' + '配号来源' + '</td><td>' + '{配号来源}' + '</td></tr><tr><td>' + '用海一级类' + '</td><td>' + '{用海一级类}' + '</td></tr><tr><td>' + '用海二级类' + '</td><td>' + '{用海二级类}' + '</td></tr><tr><td>' + '用海方式' + '</td><td>' + '{用海方式}' + '</td></tr><tr><td class=\"projects\">' + '项目数量' + '</td><td>*</td></tr></tbody></table>'\r\n\r\n        //==widgets======================//\r\n\r\n        var compass = new Compass({\r\n            viewModel: new CompassVM({\r\n                view: view\r\n            })\r\n        }, \"compass\");\r\n        compass.startup();\r\n\r\n        var homeBtn = new Home({\r\n            viewModel: new HomeVM({\r\n                view: view\r\n            })\r\n        }, \"home\");\r\n        homeBtn.startup();\r\n\r\n        var basemapToggle = new BasemapToggle({\r\n            view: view,\r\n            nextBasemap: \"hybrid\"\r\n        }, 'basemap');\r\n        basemapToggle.startup();\r\n\r\n        //var legend = new Legend({ view: view }, 'legend');\r\n\r\n        var legend = new Legend({\r\n            view: view\r\n        });\r\n        legend.startup();\r\n\r\n        view.ui.add(legend, \"bottom-right\");\r\n\r\n        //==widgets======================//\r\n\r\n\r\n        var zoningLyr = new FeatureLayer({\r\n            id: 'base',\r\n            url: \"http://localhost:6080/arcgis/rest/services/区域/MapServer/0\",\r\n        });\r\n\r\n        map.add(zoningLyr);\r\n        map.reorder(zoningLyr, 0);\r\n\r\n        var zoningLyrCtrl = {\r\n            on: true,\r\n            toggle: function() {\r\n                if (this.on) {\r\n                    map.remove(zoningLyr);\r\n                } else {\r\n                    map.add(zoningLyr);\r\n                    map.reorder(zoningLyr, 0);\r\n                };\r\n                this.on = !this.on;\r\n            }\r\n        };\r\n\r\n        var lyrIds = ['功能区划', '确权数据', '确权数据--配号来源', '确权数据--用海一级类', '确权数据--用海二级类', '确权数据--用海方式'];\r\n\r\n        var authLyrs = [];\r\n        authLyrs[1] = new FeatureLayer({\r\n            id: lyrIds[1],\r\n            outFields: [\"*\"],\r\n            url: \"http://localhost:6080/arcgis/rest/services/用海信息/MapServer/1\",\r\n            popupTemplate: new PopupTemplate({\r\n                title: 'ID: {FID}',\r\n                content: contentTable\r\n            })\r\n        });\r\n        map.add(authLyrs[1]);\r\n\r\n        for (var i = 2; i < 6; i++) {\r\n            var tempLyr = new FeatureLayer({\r\n                id: lyrIds[i],\r\n                outFields: [\"*\"],\r\n                url: \"http://localhost:6080/arcgis/rest/services/用海信息/MapServer/\" + i,\r\n                popupTemplate: new PopupTemplate({\r\n                    title: 'ID: {FID}',\r\n                    content: contentTable\r\n                })\r\n            });\r\n\r\n            authLyrs[i] = tempLyr;\r\n        }\r\n\r\n        var authLyrCtrl = {\r\n            inviewIndex: 1,\r\n            on: true,\r\n            switchTo: function(val) {\r\n                if (val !== this.inviewIndex) {\r\n                    map.remove(authLyrs[this.inviewIndex]);\r\n                    map.add(authLyrs[val]);\r\n                    map.reorder(authLyrs[val], 1);\r\n                    this.inviewIndex = val;\r\n                }\r\n            },\r\n            show: function() {\r\n                map.add(authLyrs[this.inviewIndex]);\r\n                map.reorder(authLyrs[this.inviewIndex], 1);\r\n                this.on = true;\r\n            },\r\n            hide: function() {\r\n                map.remove(authLyrs[this.inviewIndex]);\r\n                this.on = false;\r\n            },\r\n            toggle: function() {\r\n                if (this.on) {\r\n                    map.remove(authLyrs[this.inviewIndex]);\r\n                    this.on = false;\r\n                } else {\r\n                    map.add(authLyrs[this.inviewIndex]);\r\n                    map.reorder(authLyrs[this.inviewIndex], 1);\r\n                    this.on = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        function showVS(results) {\r\n            /*****\r\n\r\n\r\n            multipul layers for vs different outline size\r\n\r\n            ******/\r\n            var features = results.features;\r\n\r\n            var sym = new SimpleMarkerSymbol({\r\n                color: [26, 119, 80, 0.7],\r\n                outline: { // autocasts as new SimpleLineSymbol()\r\n                    color: [255, 255, 255],\r\n                    width: 1\r\n                }\r\n            });\r\n\r\n\r\n            var sym2 = new SimpleFillSymbol({\r\n                color: [26, 119, 80, 0.7],\r\n                outline: { // autocasts as new SimpleLineSymbol()\r\n                    color: [255, 255, 255],\r\n                    width: 2\r\n                }\r\n            });\r\n\r\n            var fields = [{\r\n                name: \"ObjectID\",\r\n                alias: \"ObjectID\",\r\n                type: \"oid\"\r\n            }, {\r\n                name: \"radius\",\r\n                alias: \"radius\",\r\n                type: \"double\"\r\n            }, {\r\n                name: \"radius2\",\r\n                alias: \"radius2\",\r\n                type: \"double\"\r\n            }];\r\n\r\n            fields = fields.concat(authLyrs[1].fields);\r\n\r\n            var colorVisVar = {\r\n                type: \"color\",\r\n                field: \"radius\",\r\n                stops: [{\r\n                    value: 4,\r\n                    color: [45, 195, 125, 0.9]\r\n                }, {\r\n                    value: 10,\r\n                    color: [45, 195, 125, 0.4]\r\n                }]\r\n            }\r\n\r\n            var colorVisVar2 = {\r\n                type: \"color\",\r\n                field: \"radius2\",\r\n                stops: [{\r\n                    value: 4,\r\n                    color: [155, 45, 95, 0.9]\r\n                }, {\r\n                    value: 10,\r\n                    color: [155, 45, 95, 0.4]\r\n                }]\r\n            }\r\n            var sizeVisVar = {\r\n                type: \"size\",\r\n                field: \"radius\",\r\n                valueUnit: \"unknown\",\r\n                stops: [{\r\n                    value: 4,\r\n                    size: 8\r\n                }, {\r\n                    value: 6,\r\n                    size: 24\r\n                }, {\r\n                    value: 8,\r\n                    size: 36\r\n                }, {\r\n                    value: 10,\r\n                    size: 42\r\n                }, {\r\n                    value: 12,\r\n                    size: 100\r\n                }]\r\n            }\r\n\r\n            var sizeVisVar2 = {\r\n                type: \"size\",\r\n                field: \"radius2\",\r\n                valueUnit: \"unknown\",\r\n                stops: [{\r\n                    value: 4,\r\n                    size: 42\r\n                }, {\r\n                    value: 6,\r\n                    size: 36\r\n                }, {\r\n                    value: 8,\r\n                    size: 24\r\n                }, {\r\n                    value: 10,\r\n                    size: 8\r\n                }]\r\n            }\r\n            var renderer = new SimpleRenderer({\r\n                // Define a default marker symbol with a small outline\r\n                symbol: new SimpleMarkerSymbol({\r\n                    color: [45, 195, 125, 0.7],\r\n                    outline: { // autocasts as new SimpleLineSymbol()\r\n                        color: [255, 255, 255, 0.6],\r\n                        width: 1\r\n                    }\r\n                }),\r\n                // Set the color and size visual variables on the renderer\r\n                visualVariables: [colorVisVar, sizeVisVar]\r\n            });\r\n\r\n            var renderer2 = new SimpleRenderer({\r\n                // Define a default marker symbol with a small outline\r\n                symbol: new SimpleMarkerSymbol({\r\n                    color: [45, 195, 125, 0.7],\r\n                    outline: { // autocasts as new SimpleLineSymbol()\r\n                        color: [255, 255, 255, 0.8],\r\n                        width: 1\r\n                    }\r\n                }),\r\n                // Set the color and size visual variables on the renderer\r\n                visualVariables: [colorVisVar2, sizeVisVar2]\r\n            });\r\n\r\n            function getSimpleR(outlineWidth) {\r\n                return new SimpleRenderer({\r\n                    // Define a default marker symbol with a small outline\r\n                    symbol: new SimpleMarkerSymbol({\r\n                        color: [45, 195, 125, 0.8],\r\n                        outline: { // autocasts as new SimpleLineSymbol()\r\n                            color: [85, 24 * outlineWidth, 185, 0.6],\r\n                            width: outlineWidth - 4\r\n                        }\r\n                    }),\r\n                    // Set the color and size visual variables on the renderer\r\n                    visualVariables: [sizeVisVar2]\r\n                });\r\n            }\r\n            var featureSets = [\r\n                [],\r\n                [],\r\n                [],\r\n                []\r\n            ];\r\n            features.forEach(function(feature, index) {\r\n                var attributes = feature.attributes;\r\n                var name = attributes.ZIP + \" (\" +\r\n                    attributes.PO_NAME + \")\"\r\n                var gm = feature.geometry;\r\n\r\n                var point = new Point({\r\n                    longitude: gm.longitude ? gm.longitude : gm.centroid.longitude,\r\n                    latitude: gm.latitude ? gm.latitude : gm.centroid.latitude\r\n                });\r\n\r\n                var radius = feature.attributes.FID > 1800 ? 10 : feature.attributes.FID > 1700 ? 8 : feature.attributes.FID > 1500 ? 6 : 4;\r\n\r\n\r\n                var circle = new Circle({\r\n                    radius: radius,\r\n                    radiusUnit: 'miles',\r\n                    center: feature.geometry.getPoint(0, 0)\r\n                });\r\n                feature.attributes.ObjectID = index;\r\n\r\n                feature.attributes.radius = radius;\r\n\r\n                feature.attributes.radius2 = 14 - radius;\r\n                switch (feature.attributes.radius2) {\r\n                    case 4:\r\n                        featureSets[0].push(feature);\r\n                    case 6:\r\n                        featureSets[1].push(feature);\r\n                    case 8:\r\n                        featureSets[2].push(feature);\r\n                    case 10:\r\n                        featureSets[3].push(feature);\r\n                }\r\n\r\n            });\r\n            for (let index in featureSets) {\r\n                var vslyr = new FeatureLayer({\r\n                    source: featureSets[index],\r\n                    fields: fields,\r\n                    objectIdField: \"ObjectID\",\r\n                    renderer: getSimpleR(index * 2 + 4),\r\n                    geometryType: \"polygon\",\r\n                    id: 'vs' + index,\r\n\r\n                });\r\n\r\n                map.add(vslyr);\r\n\r\n                map.reorder(vslyr, 99);\r\n            }\r\n\r\n\r\n            var vslyr = new FeatureLayer({\r\n                source: features,\r\n                fields: fields,\r\n                objectIdField: \"ObjectID\",\r\n                renderer: renderer,\r\n                geometryType: \"polygon\",\r\n                id: 'vs',\r\n\r\n            });\r\n\r\n            //map.add(vslyr);\r\n\r\n            //map.reorder(vslyr, 99);\r\n            var vslyr2 = new FeatureLayer({\r\n                source: features,\r\n                fields: fields,\r\n                objectIdField: \"ObjectID\",\r\n                renderer: renderer2,\r\n                geometryType: \"polygon\",\r\n                id: 'vs2',\r\n\r\n            });\r\n\r\n            //map.add(vslyr2);\r\n\r\n            map.reorder(vslyr2, 99);\r\n            /*on(listNode, on.selector(\"li\", a11yclick), function(evt) {\r\n                var target = evt.target;\r\n                var resultId = domAttr.get(target, \"data-result-id\");\r\n\r\n                // get the graphic corresponding to the clicked zip code\r\n                var result = resultId && graphics && graphics[parseInt(resultId,\r\n                    10)];\r\n\r\n                if (result) {\r\n                    // open the popup at the centroid of zip code polygon\r\n                    // and set the popup's features which will populate popup content and title.\r\n                    view.popup.open({\r\n                        features: [result],\r\n                        location: result.geometry.centroid\r\n                    });\r\n                }\r\n            });*/\r\n\r\n        }\r\n\r\n        authLyrs[1].then(function() {\r\n            //authLyrs[1].queryFeatures().then(showVS);\r\n        });\r\n\r\n        $('input.toggle.toggle-zoning').change(function() {\r\n            zoningLyrCtrl.toggle();\r\n        });\r\n\r\n        $('input.toggle.toggle-auth').change(function() {\r\n            authLyrCtrl.toggle();\r\n        });\r\n\r\n        $('select[name=authLyr]').change(function() {\r\n            authLyrCtrl.switchTo($(this).val());\r\n        });\r\n\r\n        var managePopupContent = function() {\r\n            var status = 1;\r\n            return function() {\r\n                var el = $('.esri-popup-content')[0];\r\n                if (status === 1 && el.childElementCount > 0) {\r\n                    $('.esri-popup-content').unbind(\"DOMSubtreeModified\");\r\n                    var fid = $('.esri-popup-content').find('.data-fid.loader').data('fid');\r\n                    if (fid) {\r\n                        $.get('http://localhost:3000/popup_content?id=' + fid, function(htmlStr) {\r\n                            $('.esri-popup-content').html(htmlStr);\r\n\r\n                            $('.ui.dropdown').dropdown();\r\n                            $('.popup-content-custom table').find('a').click(function() {\r\n                                var field = $(this).data('type');\r\n                                var qstr = 'SELECT `' + field + '` as label, count(`' + field + '` = `' + field + '`) as value FROM gis1.authorizing group by `' + field + '`';\r\n                                createChart(qstr, field);\r\n                            });\r\n                            $('.esri-popup-content').bind(\"DOMSubtreeModified\", managePopupContent);\r\n                        })\r\n                    }\r\n\r\n                    status = 0;\r\n                };\r\n                if (el.childElementCount < 1) {\r\n                    status = 1;\r\n                };\r\n            }\r\n        }();\r\n\r\n        /*$('.esri-popup-content').bind(\"DOMSubtreeModified\", managePopupContent);\r\n        view.on('click', function(evt) {\r\n            showCoordinates(evt);\r\n        })\r\n\r\n        $.get('http://localhost:6080/arcgis/rest/services/用海信息/MapServer/legend?f=pjson', function(res) {\r\n            legendJson = JSON.parse(res);\r\n            for (var i = 1; i < 6; i++) {\r\n                var layerTemp = legendJson.layers[i];\r\n                var layerLegend = layerTemp.legend;\r\n                var tempSrc = new dataSrc();\r\n                tempSrc.chart.subCaption = layerTemp.layerName;\r\n                tempSrc.chart.xAxisName = layerTemp.layerName;\r\n                var queryStatesTask = new QueryTask({\r\n                    url: \"http://localhost:6080/arcgis/rest/services/用海信息/MapServer/\" + i\r\n                });\r\n                var promiseResults = [];\r\n                for (var j = layerLegend.length - 1; i >= 0; i--) {\r\n                    var legd = layerLegend[i];\r\n                    promiseResults.push(new Promise((resolve, reject) => {\r\n                        var query = new Query();\r\n                        query.where = layerTemp.layerName + \" = \" + \"'\" + legd.label + \"'\";\r\n                        queryStatesTask.execute(query).then(function(result) {\r\n                            console.log(result.features.length);\r\n                            var tempData = {\r\n                                \"label\": legd.label,\r\n                                \"value\": result.features.length\r\n                            };\r\n                            resolve(tempData);\r\n                        });\r\n                    }))\r\n                }\r\n                Promise.all(promiseResults).then(function(dataArr) {\r\n                    console.log(dataArr);\r\n                    tempSrc.data = dataArr;\r\n                    renderCol3d(tempSrc);\r\n\r\n                })\r\n            }\r\n        })*/\r\n\r\n        function searchForIt() {\r\n            var resultDiv = $('#searchResult.results');\r\n            resultDiv.addClass('visible');\r\n            var $input = $('input[name=\"search\"');\r\n            $('i.icon.remove').show();\r\n            $('i.icon.search').hide();\r\n            console.log('http://localhost:3000/search?q=' + $input.val());\r\n            $.get('http://localhost:3000/search?q=' + $input.val(), function(res) {\r\n                console.log(res);\r\n                var resultDiv = $('#searchResult.results');\r\n                resultDiv.find('.result').remove();\r\n                var projects = resultDiv.find('.projects');\r\n                var zones = resultDiv.find('.zones');\r\n                for (let rs of res.rows[0]) {\r\n                    projects.show();\r\n                    $('a.csv1').show();\r\n                    var desc = '';\r\n                    for (let key in rs) {\r\n                        desc = desc + key + ': ' + rs[key];\r\n                    }\r\n                    desc=desc.substring(0,64)+'...';\r\n                    projects.append(addResult(rs['项目名称'], desc, rs['确权区域ID']))\r\n                }\r\n\r\n                for (let rs of res.rows[1]) {\r\n                    zones.show();\r\n                    $('a.csv2').show();\r\n                    var desc = '';\r\n                    for (let key in rs) {\r\n                        desc = desc + key + ': ' + rs[key];\r\n                    }\r\n                    desc=desc.substring(0,64)+'...';\r\n                    zones.append(addResult(rs.id, desc, rs.id))\r\n                }\r\n                var links = resultDiv.find(\".download-results\");\r\n                var csvNames = res.csvs.split(',');\r\n\r\n                links.find('.csv1').attr('href', 'http://localhost:3000/csv/' + csvNames[0]);\r\n                links.find('.csv2').attr('href', 'http://localhost:3000/csv/' + csvNames[1]);\r\n                links.show();\r\n            })\r\n\r\n            function addResult(title, desc, popid) {\r\n                return $('<a>').attr({ 'class': 'result', 'data-popid': popid })\r\n                    .append($('<div>').attr('class', 'content')\r\n                        .append($('<div>').attr('class', 'title').text(title))\r\n                        .append($('<div>').attr('class', 'description').text(desc))\r\n                    ).click(function() {\r\n                        var featureId = $(this).data('popid');\r\n                        console.log(authLyrCtrl.inviewIndex);\r\n                        var flayr = authLyrs[authLyrCtrl.inviewIndex];\r\n                        var query = new Query();\r\n                        query.where = \"FID = \" + featureId;\r\n                        query.returnGeometry = true;\r\n                        query.outFields=['*'];\r\n                        map.reorder(flayr,100);\r\n                        flayr.queryFeatures(query).then(function(results) {\r\n                            console.log(results);\r\n                            view.popup.open({\r\n                                features: [results.features[0]],\r\n                                location: results.features[0].geometry.centroid\r\n                            });\r\n                        })\r\n\r\n                    });\r\n            }\r\n        }\r\n    });\r\n\r\n    function showCoordinates(evt) {\r\n        $('#esri_widgets_Attribution_0 > div.esri-attribution__sources').html(evt.mapPoint.latitude + evt.mapPoint.longitude)\r\n    }\r\n});\r\n"],"sourceRoot":"/source/"}